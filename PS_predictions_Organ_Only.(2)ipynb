{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPYSQ+ItC4KiqXOZnzD+9YZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jungro-Lee/Jungro-Lee/blob/master/PS_predictions_Organ_Only.(2)ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install monai"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LcxD-wFH0loV",
        "outputId": "b85a2953-187e-480f-b0f1-4b9f86da2846"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: monai in /usr/local/lib/python3.9/dist-packages (1.1.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.9/dist-packages (from monai) (1.22.4)\n",
            "Requirement already satisfied: torch>=1.8 in /usr/local/lib/python3.9/dist-packages (from monai) (1.13.1+cu116)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.9/dist-packages (from torch>=1.8->monai) (4.5.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install einops"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZJeua72vnaRE",
        "outputId": "d789e501-869d-4bf3-a562-9ab2668c95a5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: einops in /usr/local/lib/python3.9/dist-packages (0.6.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "Wi83ZMk8yPFe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef645641-5203-4017-fc3b-f348e11ebb0b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.cuda.is_available(): True\n",
            "torch.cuda.get_device_name(0): Tesla T4\n",
            "torch.version.cuda: 11.6\n",
            "torch.cuda.device_count(): 1\n",
            "\n",
            "MONAI version: 1.1.0\n",
            "Numpy version: 1.22.4\n",
            "Pytorch version: 1.13.1+cu116\n",
            "MONAI flags: HAS_EXT = False, USE_COMPILED = False, USE_META_DICT = False\n",
            "MONAI rev id: a2ec3752f54bfc3b40e7952234fbeb5452ed63e3\n",
            "MONAI __file__: /usr/local/lib/python3.9/dist-packages/monai/__init__.py\n",
            "\n",
            "Optional dependencies:\n",
            "Pytorch Ignite version: NOT INSTALLED or UNKNOWN VERSION.\n",
            "Nibabel version: 3.0.2\n",
            "scikit-image version: 0.19.3\n",
            "Pillow version: 8.4.0\n",
            "Tensorboard version: 2.12.0\n",
            "gdown version: 4.6.6\n",
            "TorchVision version: 0.14.1+cu116\n",
            "tqdm version: 4.65.0\n",
            "lmdb version: NOT INSTALLED or UNKNOWN VERSION.\n",
            "psutil version: 5.9.4\n",
            "pandas version: 1.4.4\n",
            "einops version: 0.6.0\n",
            "transformers version: NOT INSTALLED or UNKNOWN VERSION.\n",
            "mlflow version: NOT INSTALLED or UNKNOWN VERSION.\n",
            "pynrrd version: NOT INSTALLED or UNKNOWN VERSION.\n",
            "\n",
            "For details about installing the optional dependencies, please visit:\n",
            "    https://docs.monai.io/en/latest/installation.html#installing-the-recommended-dependencies\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torchvision as tv\n",
        "import torch.nn as nn\n",
        "from torch.nn import functional as F\n",
        "import time\n",
        "from PIL import Image\n",
        "import PIL\n",
        "import cv2\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import random\n",
        "from torchsummary import summary as model_summary\n",
        "import glob\n",
        "import nibabel as nib\n",
        "import skimage\n",
        "import sklearn\n",
        "from sklearn import model_selection\n",
        "import monai\n",
        "from monai.apps import download_and_extract\n",
        "from monai.config import print_config\n",
        "from monai.networks.nets import UNet\n",
        "from monai.networks.layers import Norm\n",
        "from monai.losses import DiceFocalLoss\n",
        "from monai.metrics import DiceMetric\n",
        "from monai.inferers import sliding_window_inference\n",
        "import tempfile\n",
        "from monai.networks.nets import UNet\n",
        "from monai.networks.layers import Norm\n",
        "from monai.transforms import (\n",
        "    Compose,\n",
        "    EnsureChannelFirstd,\n",
        "    LoadImage,\n",
        "    LoadImaged,\n",
        "    Orientationd,\n",
        "    Rand3DElasticd,\n",
        "    RandAffined,\n",
        "    Spacingd,\n",
        "    Resized,\n",
        "    NormalizeIntensityd,\n",
        "    ToTensord,\n",
        "    AsDiscrete,\n",
        ")\n",
        "from monai.config import print_config\n",
        "from typing import Optional\n",
        "\n",
        "from tqdm import tqdm\n",
        "# from tqdm.notebook import tqdm\n",
        "\n",
        "print(f'torch.cuda.is_available(): {torch.cuda.is_available()}')\n",
        "print(f'torch.cuda.get_device_name(0): {torch.cuda.get_device_name(0)}')\n",
        "print(f'torch.version.cuda: {torch.version.cuda}')\n",
        "print(f'torch.cuda.device_count(): {torch.cuda.device_count()}')\n",
        "print()\n",
        "monai.config.print_config()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 구성\n",
        "1. 데이터 불러오기\n",
        "2. 데이터 체크(형태, 구조, 자료형 확인)\n",
        "3. 데이터 전처리\n",
        "    - minmax\n",
        "    - resize 등\n",
        "4. 2번 다시\n",
        "5. 시각화"
      ],
      "metadata": {
        "id": "czu-vMAr1TXs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### HYPER PARAMETER ###\n",
        "\n",
        "RANDOM_SEED = 831\n",
        "IMAGE_SIZE = (128, 128, 128)\n",
        "BATCH_SIZE = 2\n",
        "NUM_CLASS = 2\n",
        "EPOCHS = 200\n",
        "test_ratio, val_ratio = 0.1, 0.2\n",
        "\n",
        "MODEL_SAVE = True\n",
        "if MODEL_SAVE:\n",
        "    model_dir1 = r\"C:\\Users\\jungr\\OneDrive\\바탕 화면\\data\"\n",
        "    model_dir2 = 'Segmentation(3D)-UNETR(bg)'\n",
        "    MODEL_SAVE_PATH = os.path.join(model_dir1, model_dir2)\n",
        "    os.makedirs(MODEL_SAVE_PATH, exist_ok=True)\n",
        "    \n",
        "DEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "# DEVICE = 'cpu'\n",
        "print(DEVICE)\n",
        "MODEL_SAVE_PATH"
      ],
      "metadata": {
        "id": "pxWUwX-X0kF3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "5be3e5d7-79ca-460c-f841-f53372c992b9"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'C:\\\\Users\\\\jungr\\\\OneDrive\\\\바탕 화면\\\\data/Segmentation(3D)-UNETR(bg)'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "0. 데이터 준비\n",
        "- 데이터가 있으면 `data_dir`를 자신의 경로에 맞게 수정해주세요.\n",
        "- 데이터가 없으면 `USE_MY_DATA` 를 `False`로 두고 다운로드 받으면 됩니다.\n",
        "- The dataset comes from http://medicaldecathlon.com/."
      ],
      "metadata": {
        "id": "wUt3x2JU1gi5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "USE_MY_DATA = False\n",
        "\n",
        "if not USE_MY_DATA:\n",
        "    directory = os.environ.get(\"MONAI_DATA_DIRECTORY\")\n",
        "    root_dir = tempfile.mkdtemp() if directory is None else directory\n",
        "    print(f\"root dir is: {root_dir}\")\n",
        "    \n",
        "    resource = \"https://msd-for-monai.s3-us-west-2.amazonaws.com/Task09_Spleen.tar\"\n",
        "    md5 = \"410d4a301da4e5b2f6f86ec3ddba524e\"\n",
        "\n",
        "    compressed_file = os.path.join(root_dir, \"Task09_Spleen.tar\")\n",
        "    data_dir = os.path.join(root_dir, \"Task09_Spleen\")\n",
        "    if not os.path.exists(data_dir):\n",
        "        download_and_extract(resource, compressed_file, root_dir, md5)\n",
        "\n",
        "else:\n",
        "    data_dir = r\"C:\\Users\\jungr\\OneDrive\\바탕 화면\\data\\spleen_10.nii.gz\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vl4zhhk91iEH",
        "outputId": "200be082-2f53-46ab-8dff-a8cee7659257"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root dir is: /tmp/tmprcy1s3g3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Task09_Spleen.tar: 1.50GB [00:58, 27.5MB/s]                            "
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2023-04-02 06:38:48,961 - INFO - Downloaded: /tmp/tmprcy1s3g3/Task09_Spleen.tar\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2023-04-02 06:38:51,903 - INFO - Verified 'Task09_Spleen.tar', md5: 410d4a301da4e5b2f6f86ec3ddba524e.\n",
            "2023-04-02 06:38:51,907 - INFO - Writing into directory: /tmp/tmprcy1s3g3.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_images = sorted(\n",
        "    glob.glob(os.path.join(data_dir, \"imagesTr\", \"*.nii.gz\")))\n",
        "train_labels = sorted(\n",
        "    glob.glob(os.path.join(data_dir, \"labelsTr\", \"*.nii.gz\")))\n",
        "data_dicts = [\n",
        "    {\"image\": image_name, \"label\": label_name}\n",
        "    for image_name, label_name in zip(train_images, train_labels)\n",
        "]\n",
        "train_data_dicts, val_data_dicts = data_dicts[:-9], data_dicts[-9:]\n",
        "train_data_dicts[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C0UZTKtH1kA_",
        "outputId": "ac47d1e1-17a5-44af-eb83-0803ab3a7c4f"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'image': '/tmp/tmprcy1s3g3/Task09_Spleen/imagesTr/spleen_10.nii.gz',\n",
              " 'label': '/tmp/tmprcy1s3g3/Task09_Spleen/labelsTr/spleen_10.nii.gz'}"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_images = sorted(\n",
        "    glob.glob(os.path.join(data_dir, \"imagesTr\", \"*.nii.gz\")))\n",
        "train_labels = sorted(\n",
        "    glob.glob(os.path.join(data_dir, \"labelsTr\", \"*.nii.gz\")))\n",
        "\n",
        "data_dicts = [\n",
        "    {\"image\": image_name, \"label\": label_name}\n",
        "    for image_name, label_name in zip(train_images, train_labels)\n",
        "]\n",
        "\n",
        "TrainSet, TestSet = model_selection.train_test_split(data_dicts, test_size=test_ratio, random_state=RANDOM_SEED)\n",
        "TrainSet, ValSet = model_selection.train_test_split(TrainSet, test_size=val_ratio, random_state=RANDOM_SEED)\n",
        "print('TrainSet:', len(TrainSet), 'ValSet:', len(ValSet), 'TestSet:', len(TestSet))"
      ],
      "metadata": {
        "id": "R1xlqjQc1mRy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c99de74a-4792-4a46-a66e-88f7605b20d4"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TrainSet: 28 ValSet: 8 TestSet: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(3):\n",
        "    sample_img = nib.load(TrainSet[i]['image']).get_fdata()\n",
        "    sample_mask = nib.load(TrainSet[i]['label']).get_fdata()\n",
        "    print(f\"[sample {i+1}] {os.path.basename(TrainSet[i]['image'])} {os.path.basename(TrainSet[i]['label'])}\")\n",
        "    print(sample_img.shape, sample_img.dtype, np.min(sample_img), np.max(sample_img))\n",
        "    print(sample_mask.shape, sample_mask.dtype, np.unique(sample_mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gu02y8YgYoE5",
        "outputId": "2639cdc4-1179-4a37-e6d0-0cae6e46647b"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[sample 1] spleen_2.nii.gz spleen_2.nii.gz\n",
            "(512, 512, 90) float64 -1024.0 3071.0\n",
            "(512, 512, 90) float64 [0. 1.]\n",
            "[sample 2] spleen_19.nii.gz spleen_19.nii.gz\n",
            "(512, 512, 51) float64 -1024.0 1372.0\n",
            "(512, 512, 51) float64 [0. 1.]\n",
            "[sample 3] spleen_17.nii.gz spleen_17.nii.gz\n",
            "(512, 512, 95) float64 -1024.0 1964.0\n",
            "(512, 512, 95) float64 [0. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from monai.transforms.compose import Transform, MapTransform\n",
        "\n",
        "class MinMax(MapTransform):\n",
        "    def __init__(self, keys):\n",
        "        super().__init__(keys)\n",
        "\n",
        "    def __call__(self, data):\n",
        "        d = dict(data)\n",
        "        for key in self.keys:\n",
        "            d[key] -= np.min(d[key])\n",
        "            d[key] /= np.max(d[key])\n",
        "        return d\n",
        "\n",
        "loader = LoadImaged(keys=(\"image\",'label'), image_only=False)\n",
        "ensure_channel_first = EnsureChannelFirstd(keys=[\"image\",'label'])\n",
        "orientation = Orientationd(keys=[\"image\",'label'], axcodes=\"RAS\")\n",
        "resize_img = Resized(keys=[\"image\",], spatial_size=(IMAGE_SIZE), mode='trilinear')\n",
        "resize_mask = Resized(keys=['label',], spatial_size=(IMAGE_SIZE), mode='nearest-exact')\n",
        "# normalize = NormalizeIntensityd(keys=[\"image\",])\n",
        "minmax = MinMax(keys=['image',])"
      ],
      "metadata": {
        "id": "Je5lDytgYqGI"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "transforms = Compose([\n",
        "    LoadImaged(keys=(\"image\",'label'), image_only=False),\n",
        "    EnsureChannelFirstd(keys=[\"image\",'label']),\n",
        "    Orientationd(keys=[\"image\",'label'], axcodes=\"RAS\"),\n",
        "    Resized(keys=[\"image\",], spatial_size=(IMAGE_SIZE), mode='trilinear'),\n",
        "    Resized(keys=['label',], spatial_size=(IMAGE_SIZE), mode='nearest-exact'),\n",
        "    # normalize = NormalizeIntensityd(keys=[\"image\",])\n",
        "    MinMax(keys=['image',]),\n",
        "    ToTensord(keys=[\"image\", \"label\"]),\n",
        "    ])\n",
        "\n",
        "SampleSet = transforms(TestSet[:3])\n",
        "\n",
        "for i in range(3):\n",
        "    sample_img = SampleSet[i]['image']\n",
        "    sample_mask = SampleSet[i]['label']\n",
        "    print(f\"[sample {i+1}]\")\n",
        "    print(sample_img.shape, sample_img.dtype, torch.min(sample_img), torch.max(sample_img))\n",
        "    print(sample_mask.shape, sample_mask.dtype, torch.unique(sample_mask))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "avswFbrWYvVD",
        "outputId": "90fc5e48-4f65-45e9-a6f9-c6f5d50b2c55"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[sample 1]\n",
            "torch.Size([1, 128, 128, 128]) torch.float32 tensor(0.) tensor(1.)\n",
            "torch.Size([1, 128, 128, 128]) torch.float32 tensor([0., 1.])\n",
            "[sample 2]\n",
            "torch.Size([1, 128, 128, 128]) torch.float32 tensor(0.) tensor(1.)\n",
            "torch.Size([1, 128, 128, 128]) torch.float32 tensor([0., 1.])\n",
            "[sample 3]\n",
            "torch.Size([1, 128, 128, 128]) torch.float32 tensor(0.) tensor(1.)\n",
            "torch.Size([1, 128, 128, 128]) torch.float32 tensor([0., 1.])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ncols, nrows = 10, 6\n",
        "interval = int(IMAGE_SIZE[-1]//(ncols*nrows/2))\n",
        "fig, axes = plt.subplots(ncols=ncols, nrows=nrows, figsize=(ncols,nrows))\n",
        "cnt1, cnt2 = 0, 0\n",
        "for i in range(nrows):\n",
        "    for j in range(ncols):\n",
        "        if i%2 == 0:\n",
        "            axes[i,j].imshow(SampleSet[0]['image'][0,:,:,cnt1], cmap='gray')\n",
        "            cnt1+=interval\n",
        "        else:\n",
        "            axes[i,j].imshow(SampleSet[0]['label'][0,:,:,cnt2], cmap='gray')\n",
        "            cnt2+=interval\n",
        "        axes[i,j].axis('off')\n",
        "plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1)\n",
        "plt.show()  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 636
        },
        "id": "qNkoZhf5YxbE",
        "outputId": "dc0e13ed-1e86-4308-bcae-ba8c395a34d6"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 60 Axes>"
            ],
            "image/png": "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VhmMsW9gYGBgYGBgYGBgYGBgsMpgjH0DAwMDAwMDAwMDAwMDg1UGY+wbGBgYGBgYGBgYGBgYGKwyGGPfwMDAwMDAwMDAwMDAwGCVwRj7BgYGBgYGBgYGBgYGBgarDMbYNzAwMDAwMDAwMDAwMDBYZTDGvoGBgYGBgYGBgYGBgYHBKoMx9g0MDAwMDAwMDAwMDAwMVhmMsW9gYGBgYGBgYGBgYGBgsMpgjH0DAwMDAwMDAwMDAwMDg1UGY+wbGBgYGBgYGBgYGBgYGKwyGGPfwMDAwMDAwMDAwMDAwGCVwRj7BgYGBgYGBgYGBgYGBgarDMbYNzAwMDAwMDAwMDAwMDBYZTDGvoGBgYGBgYGBgYGBgYHBKoMx9g0MDAwMDAwMDAwMDAwMVhmMsW9gYGBgYGBgYGBgYGBgsMpgjH0DAwMDAwMDAwMDAwMDg1UGY+wbGBgYGBgYGBgYGBgYGKwyGGPfwMDAwMDAwMDAwMDAwGCVwRj7BgYGBgYGBgYGBgYGBgarDMbYNzAwMDAwMDAwMDAwMDBYZTDGvoGBgYGBgYGBgYGBgYHBKoMx9g0MDAwMDAwMDAwMDAwMVhmMsW9gYGBgYGBgYGBgYGBgsMpgjH0DAwMDAwMDAwMDAwMDg1UGY+wbGBgYGBgYGBgYGBgYGKwyGGPfwMDAwMDAwMDAwMDAwGCVwRj7BgYGBgYGBgYGBgYGBgarDMbYNzAwMDAwMDAwMDAwMDBYZTDGvoGBgYGBgYGBgYGBgYHBKoMx9g0MDAwMDAwMDAwMDAwMVhmMsW9gYGBgYGBgYGBgYGBgsMpgjH0DAwMDAwMDAwMDAwMDg1UGY+wbGBgYGBgYGBgYGBgYGKwyGGPfwMDAwMDAwMDAwMDAwGCVwRj7BgYGBgYGBgYGBgYGBgarDMbYNzAwMDAwMDAwMDAwMDBYZTDGvoGBgYGBgYGBgYGBgYHBKoMx9g0MDAwMDAwMDAwMDAwMVhmMsW9gYGBgYGBgYGBgYGBgsMpgjH0DAwMDAwMDAwMDAwMDg1UGY+wbGBgYGBgYGBgYGBgYGKwyGGPfwMDAwMDAwMDAwMDAwGCVwRj7BgYGBgYGBgYGBgYGBgarDMbYNzAwMDAwMDAwMDAwMDBYZTDGvoGBgYGBgYGBgYGBgYHBKoMx9g0MDAwMDAwMDAwMDAwMVhmMsW9gYGBgYGBgYGBgYGBg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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from monai.data import (\n",
        "    DataLoader,\n",
        "    CacheDataset,\n",
        "    load_decathlon_datalist,\n",
        "    decollate_batch,\n",
        ")\n",
        "\n",
        "train_ds = CacheDataset(\n",
        "    data=TrainSet,\n",
        "    transform=transforms,\n",
        "    cache_num=4,\n",
        "    cache_rate=1.0,\n",
        "    num_workers=0)\n",
        "val_ds = CacheDataset(\n",
        "    data=ValSet, transform=transforms, cache_num=2, cache_rate=1.0, num_workers=0)\n",
        "test_ds = CacheDataset(\n",
        "    data=TestSet, transform=transforms, cache_num=2, cache_rate=1.0, num_workers=0)\n",
        "\n",
        "train_loader = DataLoader(\n",
        "    train_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=0, pin_memory=True)\n",
        "val_loader = DataLoader(\n",
        "    val_ds, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)\n",
        "test_loader = DataLoader(\n",
        "    test_ds, batch_size=1, shuffle=False, num_workers=0, pin_memory=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vAmXkM5aY0dH",
        "outputId": "74bb5f08-8f8f-4550-a49e-edf918fe31b6"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Loading dataset: 100%|██████████| 4/4 [00:04<00:00,  1.13s/it]\n",
            "Loading dataset: 100%|██████████| 2/2 [00:01<00:00,  1.23it/s]\n",
            "Loading dataset: 100%|██████████| 2/2 [00:04<00:00,  2.17s/it]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import copy\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import math\n",
        "from einops import rearrange, reduce, repeat\n",
        "from einops.layers.torch import Rearrange, Reduce\n",
        "from torchsummary import summary\n",
        "from torch import Tensor\n",
        "\n",
        "class SingleDeconv3DBlock(nn.Module):\n",
        "    def __init__(self, in_planes, out_planes):\n",
        "        super().__init__()\n",
        "        self.block = nn.ConvTranspose3d(in_planes, out_planes, kernel_size=2, stride=2, padding=0, output_padding=0)\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.block(x)\n",
        "\n",
        "\n",
        "class SingleConv3DBlock(nn.Module):\n",
        "    def __init__(self, in_planes, out_planes, kernel_size):\n",
        "        super().__init__()\n",
        "        self.block = nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, stride=1,\n",
        "                               padding=((kernel_size - 1) // 2))\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.block(x)\n",
        "\n",
        "\n",
        "class Conv3DBlock(nn.Module):\n",
        "    def __init__(self, in_planes, out_planes, kernel_size=3):\n",
        "        super().__init__()\n",
        "        self.block = nn.Sequential(\n",
        "            SingleConv3DBlock(in_planes, out_planes, kernel_size),\n",
        "            nn.BatchNorm3d(out_planes),\n",
        "            nn.ReLU(True)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.block(x)\n",
        "    \n",
        "    \n",
        "class Deconv3DBlock(nn.Module):\n",
        "    def __init__(self, in_planes, out_planes, kernel_size=3):\n",
        "        super().__init__()\n",
        "        self.block = nn.Sequential(\n",
        "            SingleDeconv3DBlock(in_planes, out_planes),\n",
        "            SingleConv3DBlock(out_planes, out_planes, kernel_size),\n",
        "            nn.BatchNorm3d(out_planes),\n",
        "            nn.ReLU(True)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.block(x)    \n",
        "\n",
        "class Embeddings(nn.Module):\n",
        "    def __init__(self, input_shape, patch_size=16, embed_dim=768, dropout=0.):\n",
        "        super().__init__()\n",
        "        self.patch_size = patch_size\n",
        "        self.in_channels = input_shape[-4]\n",
        "        self.n_patches = int((input_shape[-1] * input_shape[-2] * input_shape[-3]) / (patch_size * patch_size * patch_size))\n",
        "        self.embed_dim = embed_dim\n",
        "        self.patch_embeddings = nn.Conv3d(in_channels=self.in_channels, out_channels=self.embed_dim,\n",
        "                                          kernel_size=self.patch_size, stride=self.patch_size)\n",
        "        self.position_embeddings = nn.Parameter(torch.zeros(1, self.n_patches, self.embed_dim))\n",
        "        self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.patch_embeddings(x)\n",
        "        x = rearrange(x, \"b n h w d -> b (h w d) n\")\n",
        "        # batch, embed_dim, height/patch, width/patch, depth/patch\n",
        "        embeddings = x + self.position_embeddings\n",
        "        embeddings = self.dropout(embeddings)\n",
        "        return embeddings\n",
        "\n",
        "class MultiHeadAttention(nn.Module):\n",
        "    def __init__(self, emb_size: int = 768, num_heads: int = 8, dropout: float = 0):\n",
        "        super().__init__()\n",
        "        self.emb_size = emb_size\n",
        "        self.num_heads = num_heads\n",
        "        # fuse the queries, keys and values in one matrix\n",
        "        self.qkv = nn.Linear(emb_size, emb_size * 3)\n",
        "        self.att_drop = nn.Dropout(dropout)\n",
        "        self.projection = nn.Linear(emb_size, emb_size)\n",
        "        \n",
        "    def forward(self, x : Tensor, mask: Tensor = None) -> Tensor:\n",
        "        # split keys, queries and values in num_heads\n",
        "        qkv = rearrange(self.qkv(x), \"b n (h d qkv) -> (qkv) b h n d\", h=self.num_heads, qkv=3)\n",
        "        queries, keys, values = qkv[0], qkv[1], qkv[2]\n",
        "        # sum up over the last axis\n",
        "        energy = torch.einsum('bhqd, bhkd -> bhqk', queries, keys) # batch, num_heads, query_len, key_len\n",
        "        if mask is not None:\n",
        "            fill_value = torch.finfo(torch.float32).min\n",
        "            energy.mask_fill(~mask, fill_value)\n",
        "            \n",
        "        scaling = self.emb_size ** (1/2)\n",
        "        att = F.softmax(energy / scaling, dim=-1)\n",
        "        att = self.att_drop(att)\n",
        "        # sum up over the third axis\n",
        "        out = torch.einsum('bhal, bhlv -> bhav ', att, values)\n",
        "        out = rearrange(out, \"b h n d -> b n (h d)\")\n",
        "        out = self.projection(out)\n",
        "        return out\n",
        "\n",
        "class FeedForwardBlock(nn.Sequential):\n",
        "    def __init__(self, emb_size: int = 768, expansion: int = 4, drop_p: float = 0.):\n",
        "        super().__init__(\n",
        "            nn.Linear(emb_size, expansion * emb_size),\n",
        "            nn.GELU(),\n",
        "            nn.Dropout(drop_p),\n",
        "            nn.Linear(expansion * emb_size, emb_size),\n",
        "        )\n",
        "\n",
        "class PreNorm(nn.Module):\n",
        "    def __init__(self, dim, fn):\n",
        "        super().__init__()\n",
        "        self.norm = nn.LayerNorm(dim)\n",
        "        self.fn = fn\n",
        "    def forward(self, x, **kwargs):\n",
        "        return self.fn(self.norm(x), **kwargs)\n",
        "    \n",
        "class TransformerBlock(nn.Module):\n",
        "    def __init__(self, embed_dim=768, num_heads=8, depth=12, dropout=0., extract_layers=[3,6,9,12]):\n",
        "        super().__init__()\n",
        "        self.layers = nn.ModuleList([])\n",
        "        for _ in range(depth):\n",
        "            self.layers.append(nn.ModuleList([\n",
        "                PreNorm(embed_dim, MultiHeadAttention(embed_dim, num_heads, dropout)),\n",
        "                PreNorm(embed_dim, FeedForwardBlock(embed_dim, expansion=4))\n",
        "            ]))            \n",
        "        self.extract_layers = extract_layers\n",
        "        \n",
        "    def forward(self, x):\n",
        "        extract_layers = []\n",
        "        \n",
        "        for cnt, (attn, ff) in enumerate(self.layers):\n",
        "            x = attn(x) + x\n",
        "            x = ff(x) + x\n",
        "            if cnt+1 in self.extract_layers:\n",
        "                extract_layers.append(x)\n",
        "            \n",
        "        return extract_layers\n",
        "\n",
        "class UNETR(nn.Module):\n",
        "    def __init__(self, img_shape=(224, 224, 224), input_dim=3, output_dim=3, \n",
        "                 embed_dim=768, patch_size=16, num_heads=8, dropout=0.1, light_r=4):\n",
        "        super().__init__()\n",
        "        self.input_dim = input_dim\n",
        "        self.output_dim = output_dim\n",
        "        self.embed_dim = embed_dim\n",
        "        self.img_shape = img_shape\n",
        "        self.patch_size = patch_size\n",
        "        self.num_heads = num_heads\n",
        "        self.dropout = dropout\n",
        "        self.num_layers = 12\n",
        "        self.ext_layers = [3, 6, 9, 12]\n",
        "\n",
        "        self.patch_dim = [int(x / patch_size) for x in img_shape]\n",
        "        self.conv_channels = [int(i/light_r) for i in [32, 64, 128, 256, 512, 1024]]\n",
        "\n",
        "        self.embedding = Embeddings((input_dim,*img_shape))\n",
        "        \n",
        "        # Transformer Encoder\n",
        "        self.transformer = \\\n",
        "            TransformerBlock(\n",
        "            )\n",
        "\n",
        "        # U-Net Decoder\n",
        "        self.decoder0 = \\\n",
        "            nn.Sequential(\n",
        "                Conv3DBlock(input_dim, self.conv_channels[0], 3),\n",
        "                Conv3DBlock(self.conv_channels[0], self.conv_channels[1], 3)\n",
        "            )\n",
        "\n",
        "        self.decoder3 = \\\n",
        "            nn.Sequential(\n",
        "                Deconv3DBlock(embed_dim, self.conv_channels[2]),\n",
        "                Deconv3DBlock(self.conv_channels[2], self.conv_channels[2]),\n",
        "                Deconv3DBlock(self.conv_channels[2], self.conv_channels[2])\n",
        "            )\n",
        "\n",
        "        self.decoder6 = \\\n",
        "            nn.Sequential(\n",
        "                Deconv3DBlock(embed_dim, self.conv_channels[3]),\n",
        "                Deconv3DBlock(self.conv_channels[3], self.conv_channels[3]),\n",
        "            )\n",
        "\n",
        "        self.decoder9 = \\\n",
        "            Deconv3DBlock(embed_dim, self.conv_channels[4])\n",
        "\n",
        "        self.decoder12_upsampler = \\\n",
        "            SingleDeconv3DBlock(embed_dim, self.conv_channels[4])\n",
        "\n",
        "        self.decoder9_upsampler = \\\n",
        "            nn.Sequential(\n",
        "                Conv3DBlock(self.conv_channels[5], self.conv_channels[3]),\n",
        "                Conv3DBlock(self.conv_channels[3], self.conv_channels[3]),\n",
        "                Conv3DBlock(self.conv_channels[3], self.conv_channels[3]),\n",
        "                SingleDeconv3DBlock(self.conv_channels[3], self.conv_channels[3])\n",
        "            )\n",
        "\n",
        "        self.decoder6_upsampler = \\\n",
        "            nn.Sequential(\n",
        "                Conv3DBlock(self.conv_channels[4], self.conv_channels[2]),\n",
        "                Conv3DBlock(self.conv_channels[2], self.conv_channels[2]),\n",
        "                SingleDeconv3DBlock(self.conv_channels[2], self.conv_channels[2])\n",
        "            )\n",
        "\n",
        "        self.decoder3_upsampler = \\\n",
        "            nn.Sequential(\n",
        "                Conv3DBlock(self.conv_channels[3], self.conv_channels[1]),\n",
        "                Conv3DBlock(self.conv_channels[1], self.conv_channels[1]),\n",
        "                SingleDeconv3DBlock(self.conv_channels[1], self.conv_channels[1])\n",
        "            )\n",
        "\n",
        "        self.decoder0_header = \\\n",
        "            nn.Sequential(\n",
        "                Conv3DBlock(self.conv_channels[2], self.conv_channels[1]),\n",
        "                Conv3DBlock(self.conv_channels[1], self.conv_channels[1]),\n",
        "                SingleConv3DBlock(self.conv_channels[1], output_dim, 1)\n",
        "            )\n",
        "\n",
        "    def forward(self, x):\n",
        "        z0 = x\n",
        "        x = self.embedding(x)\n",
        "        z = self.transformer(x)\n",
        "        z3, z6, z9, z12 = z\n",
        "        z3 = z3.transpose(-1, -2).view(-1, self.embed_dim, *self.patch_dim)\n",
        "        z6 = z6.transpose(-1, -2).view(-1, self.embed_dim, *self.patch_dim)\n",
        "        z9 = z9.transpose(-1, -2).view(-1, self.embed_dim, *self.patch_dim)\n",
        "        z12 = z12.transpose(-1, -2).view(-1, self.embed_dim, *self.patch_dim)\n",
        "\n",
        "        z12 = self.decoder12_upsampler(z12)\n",
        "        z9 = self.decoder9(z9)\n",
        "        z9 = self.decoder9_upsampler(torch.cat([z9, z12], dim=1))\n",
        "        z6 = self.decoder6(z6)\n",
        "        z6 = self.decoder6_upsampler(torch.cat([z6, z9], dim=1))\n",
        "        z3 = self.decoder3(z3)\n",
        "        z3 = self.decoder3_upsampler(torch.cat([z3, z6], dim=1))\n",
        "        z0 = self.decoder0(z0)\n",
        "        output = self.decoder0_header(torch.cat([z0, z3], dim=1))\n",
        "        return output"
      ],
      "metadata": {
        "id": "0Nvhbw8h0AOU"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from monai.networks.nets import UNETR\n",
        "\n",
        "model = UNETR(\n",
        "    in_channels=1,\n",
        "    out_channels=NUM_CLASS,\n",
        "    img_size=IMAGE_SIZE,\n",
        "    feature_size=16,\n",
        "    hidden_size=768,\n",
        "    mlp_dim=3072,\n",
        "    num_heads=12,\n",
        "    pos_embed=\"perceptron\",\n",
        "    norm_name=\"instance\",\n",
        "    res_block=True,\n",
        "    dropout_rate=0.0,\n",
        ").float()\n",
        "model = model.to(DEVICE)\n",
        "# model_summary(model, (1,*IMAGE_SIZE), device=DEVICE.type)"
      ],
      "metadata": {
        "id": "6VdbGBXLZbKp"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from monai.losses import DiceCELoss, DiceLoss\n",
        "\n",
        "torch.backends.cudnn.benchmark = True # ??\n",
        "\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=1e-4)\n",
        "# scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=50, gamma=0.1)\n",
        "\n",
        "LossFuncion = monai.losses.DiceLoss(include_background=False, to_onehot_y=False, softmax=True)\n",
        "MetricDice = monai.metrics.DiceMetric(include_background=False, reduction=\"mean\")"
      ],
      "metadata": {
        "id": "CZlTB-0A8fWs"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def BinaryOutput(output, keepdim=True):\n",
        "    shape = output.shape\n",
        "    argmax_idx = torch.argmax(output, axis=1, keepdim=True)\n",
        "    argmax_oh = F.one_hot(argmax_idx, num_classes=NUM_CLASS)\n",
        "    if keepdim:\n",
        "        argmax_oh = torch.squeeze(argmax_oh, dim=1)\n",
        "    if len(shape) == 5:\n",
        "        argmax_oh = argmax_oh.permute(0,4,1,2,3)\n",
        "    elif len(shape) == 4:\n",
        "        argmax_oh = argmax_oh.permute(0,3,1,2)\n",
        "    \n",
        "    return argmax_oh"
      ],
      "metadata": {
        "id": "dYko_KR38i4O"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from monai.losses.dice import DiceLoss, one_hot\n",
        "\n",
        "def train(epoch, train_loader):\n",
        "    model.train()\n",
        "    mean_epoch_loss = 0\n",
        "    mean_dice_score = 0\n",
        "    epoch_iterator = tqdm(\n",
        "        train_loader, desc=\"Training (X / X EPOCHS) (loss=X.X) (dice score=%.5f)\", \n",
        "        dynamic_ncols=True)\n",
        "    \n",
        "    for step, batch in enumerate(epoch_iterator):\n",
        "        x, y = (batch[\"image\"].cuda(), batch[\"label\"].cuda())\n",
        "        y = torch.squeeze(y, dim=1)\n",
        "        y = one_hot(y[:, None, ...], num_classes=NUM_CLASS)\n",
        "        \n",
        "        logit_map = model(x)\n",
        "        loss = LossFuncion(logit_map, y)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        optimizer.zero_grad()\n",
        "        mean_epoch_loss += loss.item()\n",
        "        \n",
        "        bi_output = BinaryOutput(logit_map)\n",
        "        MetricDice(bi_output, y)\n",
        "        dice_score = MetricDice.aggregate().item()\n",
        "        mean_dice_score += dice_score\n",
        "        \n",
        "        epoch_iterator.set_description(\n",
        "            \"Training (%d / %d EPOCHS) (loss=%2.5f) (dice score=%.5f)\" \n",
        "            % (epoch, EPOCHS, loss, dice_score))\n",
        "    \n",
        "    mean_epoch_loss /= len(epoch_iterator)\n",
        "    mean_dice_score /= len(epoch_iterator)\n",
        "    \n",
        "    return mean_epoch_loss, mean_dice_score\n",
        "\n",
        "\n",
        "\n",
        "def evaluate(epoch, test_loader):\n",
        "    model.eval() \n",
        "    mean_epoch_loss = 0\n",
        "    mean_dice_score = 0\n",
        "    epoch_iterator = tqdm(\n",
        "        test_loader, desc=\"Evaluating (X / X EPOCHS) (loss=X.X) (dice score=%.5f)\", \n",
        "        dynamic_ncols=True)\n",
        "    \n",
        "    with torch.no_grad():\n",
        "        for step, batch in enumerate(epoch_iterator):\n",
        "            x, y = (batch[\"image\"].cuda(), batch[\"label\"].cuda())\n",
        "            y = torch.squeeze(y, dim=1)\n",
        "            y = one_hot(y[:, None, ...], num_classes=NUM_CLASS)\n",
        "\n",
        "            logit_map = model(x)\n",
        "            loss = LossFuncion(logit_map, y)\n",
        "            mean_epoch_loss += loss.item()\n",
        "\n",
        "            bi_output = BinaryOutput(logit_map)\n",
        "            MetricDice(bi_output, y)\n",
        "            dice_score = MetricDice.aggregate().item()\n",
        "            mean_dice_score += dice_score\n",
        "\n",
        "            epoch_iterator.set_description(\n",
        "                \"Evaluating (%d / %d EPOCHS) (loss=%2.5f) (dice score=%.5f)\" \n",
        "                % (epoch, EPOCHS, loss, dice_score))\n",
        "\n",
        "    mean_epoch_loss /= len(epoch_iterator)\n",
        "    mean_dice_score /= len(epoch_iterator)\n",
        "    \n",
        "    MetricDice.reset() # reset the status for next validation round\n",
        "    \n",
        "    return mean_epoch_loss, mean_dice_score    \n"
      ],
      "metadata": {
        "id": "POoa5w908nZu"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "losses = {'train':[], 'val':[]}\n",
        "dice_scores = {'train':[], 'val':[]}\n",
        "best_metric, best_epoch = 999, -1\n",
        "\n",
        "for epoch in range(1, EPOCHS+1):\n",
        "    train_loss, train_dice_score = train(epoch, train_loader)\n",
        "    val_loss, val_dice_score = evaluate(epoch, val_loader)\n",
        "    \n",
        "    losses['train'].append(train_loss)\n",
        "    losses['val'].append(val_loss)\n",
        "    dice_scores['train'].append(train_dice_score)\n",
        "    dice_scores['val'].append(val_dice_score)\n",
        "\n",
        "    if losses['val'][-1] < best_metric:\n",
        "        best_metric = losses['val'][-1]\n",
        "        best_epoch = epoch\n",
        "        print(f'Best record! [{epoch}] Test Loss: {val_loss:.6f}, Dice score: {val_dice_score:.6f}')\n",
        "        if MODEL_SAVE:\n",
        "            model_name = f'{best_epoch}_{best_metric}.pth'\n",
        "            torch.save(model.state_dict(), os.path.join(MODEL_SAVE_PATH, model_name))\n",
        "            print('saved model')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WdG2ROcO8pDt",
        "outputId": "af7e2d34-2680-4648-9c1b-00fd1cee0552"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (1 / 200 EPOCHS) (loss=0.98851) (dice score=0.00898): 100%|██████████| 14/14 [00:57<00:00,  4.07s/it]\n",
            "Evaluating (1 / 200 EPOCHS) (loss=0.98776) (dice score=0.01062): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [1] Test Loss: 0.984561, Dice score: 0.009796\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (2 / 200 EPOCHS) (loss=0.98566) (dice score=0.01613): 100%|██████████| 14/14 [00:58<00:00,  4.20s/it]\n",
            "Evaluating (2 / 200 EPOCHS) (loss=0.98601) (dice score=0.01693): 100%|██████████| 8/8 [00:07<00:00,  1.00it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [2] Test Loss: 0.982266, Dice score: 0.016410\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (3 / 200 EPOCHS) (loss=0.97388) (dice score=0.01946): 100%|██████████| 14/14 [00:58<00:00,  4.18s/it]\n",
            "Evaluating (3 / 200 EPOCHS) (loss=0.98383) (dice score=0.02062): 100%|██████████| 8/8 [00:09<00:00,  1.17s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [3] Test Loss: 0.979439, Dice score: 0.019889\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (4 / 200 EPOCHS) (loss=0.96971) (dice score=0.03327): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (4 / 200 EPOCHS) (loss=0.98158) (dice score=0.03680): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [4] Test Loss: 0.976424, Dice score: 0.034908\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (5 / 200 EPOCHS) (loss=0.97960) (dice score=0.05061): 100%|██████████| 14/14 [00:59<00:00,  4.25s/it]\n",
            "Evaluating (5 / 200 EPOCHS) (loss=0.97965) (dice score=0.05708): 100%|██████████| 8/8 [00:08<00:00,  1.09s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [5] Test Loss: 0.975205, Dice score: 0.053279\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (6 / 200 EPOCHS) (loss=0.96438) (dice score=0.08223): 100%|██████████| 14/14 [00:58<00:00,  4.18s/it]\n",
            "Evaluating (6 / 200 EPOCHS) (loss=0.97652) (dice score=0.08885): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [6] Test Loss: 0.971353, Dice score: 0.084705\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (7 / 200 EPOCHS) (loss=0.98185) (dice score=0.10841): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (7 / 200 EPOCHS) (loss=0.97633) (dice score=0.11335): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [7] Test Loss: 0.970368, Dice score: 0.109440\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (8 / 200 EPOCHS) (loss=0.97978) (dice score=0.10616): 100%|██████████| 14/14 [00:58<00:00,  4.19s/it]\n",
            "Evaluating (8 / 200 EPOCHS) (loss=0.97495) (dice score=0.11583): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [8] Test Loss: 0.969515, Dice score: 0.110281\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (9 / 200 EPOCHS) (loss=0.98402) (dice score=0.13154): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (9 / 200 EPOCHS) (loss=0.97526) (dice score=0.14304): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [9] Test Loss: 0.967918, Dice score: 0.136478\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (10 / 200 EPOCHS) (loss=0.98441) (dice score=0.15338): 100%|██████████| 14/14 [00:58<00:00,  4.19s/it]\n",
            "Evaluating (10 / 200 EPOCHS) (loss=0.97388) (dice score=0.16210): 100%|██████████| 8/8 [00:09<00:00,  1.14s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [10] Test Loss: 0.967765, Dice score: 0.156423\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (11 / 200 EPOCHS) (loss=0.95583) (dice score=0.16058): 100%|██████████| 14/14 [00:58<00:00,  4.20s/it]\n",
            "Evaluating (11 / 200 EPOCHS) (loss=0.97287) (dice score=0.16608): 100%|██████████| 8/8 [00:08<00:00,  1.03s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [11] Test Loss: 0.966099, Dice score: 0.161637\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (12 / 200 EPOCHS) (loss=0.97909) (dice score=0.16606): 100%|██████████| 14/14 [00:58<00:00,  4.17s/it]\n",
            "Evaluating (12 / 200 EPOCHS) (loss=0.97233) (dice score=0.17057): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n",
            "Training (13 / 200 EPOCHS) (loss=0.97398) (dice score=0.18323): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (13 / 200 EPOCHS) (loss=0.97157) (dice score=0.19188): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [13] Test Loss: 0.964567, Dice score: 0.186100\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (14 / 200 EPOCHS) (loss=0.96975) (dice score=0.20930): 100%|██████████| 14/14 [00:58<00:00,  4.19s/it]\n",
            "Evaluating (14 / 200 EPOCHS) (loss=0.97134) (dice score=0.21825): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [14] Test Loss: 0.963711, Dice score: 0.212112\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (15 / 200 EPOCHS) (loss=0.95946) (dice score=0.21638): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (15 / 200 EPOCHS) (loss=0.97162) (dice score=0.21857): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [15] Test Loss: 0.963492, Dice score: 0.215342\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (16 / 200 EPOCHS) (loss=0.96918) (dice score=0.19713): 100%|██████████| 14/14 [00:58<00:00,  4.18s/it]\n",
            "Evaluating (16 / 200 EPOCHS) (loss=0.97081) (dice score=0.19207): 100%|██████████| 8/8 [00:08<00:00,  1.00s/it]\n",
            "Training (17 / 200 EPOCHS) (loss=0.97843) (dice score=0.18732): 100%|██████████| 14/14 [00:57<00:00,  4.14s/it]\n",
            "Evaluating (17 / 200 EPOCHS) (loss=0.97017) (dice score=0.19172): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [17] Test Loss: 0.962518, Dice score: 0.187269\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (18 / 200 EPOCHS) (loss=0.97578) (dice score=0.18554): 100%|██████████| 14/14 [00:58<00:00,  4.14s/it]\n",
            "Evaluating (18 / 200 EPOCHS) (loss=0.96985) (dice score=0.18636): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [18] Test Loss: 0.962241, Dice score: 0.182868\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (19 / 200 EPOCHS) (loss=0.97010) (dice score=0.18759): 100%|██████████| 14/14 [00:58<00:00,  4.17s/it]\n",
            "Evaluating (19 / 200 EPOCHS) (loss=0.96966) (dice score=0.19391): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [19] Test Loss: 0.961177, Dice score: 0.188288\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (20 / 200 EPOCHS) (loss=0.97862) (dice score=0.21976): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (20 / 200 EPOCHS) (loss=0.96897) (dice score=0.21431): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [20] Test Loss: 0.960652, Dice score: 0.213559\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (21 / 200 EPOCHS) (loss=0.98087) (dice score=0.21878): 100%|██████████| 14/14 [00:56<00:00,  4.02s/it]\n",
            "Evaluating (21 / 200 EPOCHS) (loss=0.96694) (dice score=0.23354): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [21] Test Loss: 0.960036, Dice score: 0.225076\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (22 / 200 EPOCHS) (loss=0.98703) (dice score=0.26605): 100%|██████████| 14/14 [00:56<00:00,  4.04s/it]\n",
            "Evaluating (22 / 200 EPOCHS) (loss=0.96642) (dice score=0.27654): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [22] Test Loss: 0.958964, Dice score: 0.269314\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (23 / 200 EPOCHS) (loss=0.98493) (dice score=0.30024): 100%|██████████| 14/14 [00:56<00:00,  4.02s/it]\n",
            "Evaluating (23 / 200 EPOCHS) (loss=0.96511) (dice score=0.29158): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [23] Test Loss: 0.958217, Dice score: 0.291321\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (24 / 200 EPOCHS) (loss=0.98020) (dice score=0.28982): 100%|██████████| 14/14 [00:55<00:00,  3.98s/it]\n",
            "Evaluating (24 / 200 EPOCHS) (loss=0.96551) (dice score=0.30210): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n",
            "Training (25 / 200 EPOCHS) (loss=0.95823) (dice score=0.32617): 100%|██████████| 14/14 [00:56<00:00,  4.07s/it]\n",
            "Evaluating (25 / 200 EPOCHS) (loss=0.96383) (dice score=0.30868): 100%|██████████| 8/8 [00:08<00:00,  1.00s/it]\n",
            "Training (26 / 200 EPOCHS) (loss=0.95745) (dice score=0.25170): 100%|██████████| 14/14 [00:56<00:00,  4.04s/it]\n",
            "Evaluating (26 / 200 EPOCHS) (loss=0.96575) (dice score=0.24338): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [26] Test Loss: 0.957614, Dice score: 0.244183\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (27 / 200 EPOCHS) (loss=0.95240) (dice score=0.22094): 100%|██████████| 14/14 [00:56<00:00,  4.07s/it]\n",
            "Evaluating (27 / 200 EPOCHS) (loss=0.96404) (dice score=0.23827): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [27] Test Loss: 0.956184, Dice score: 0.228108\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (28 / 200 EPOCHS) (loss=0.93284) (dice score=0.29822): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (28 / 200 EPOCHS) (loss=0.96191) (dice score=0.30498): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [28] Test Loss: 0.955717, Dice score: 0.299061\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (29 / 200 EPOCHS) (loss=0.98146) (dice score=0.29434): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (29 / 200 EPOCHS) (loss=0.96082) (dice score=0.29492): 100%|██████████| 8/8 [00:07<00:00,  1.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [29] Test Loss: 0.955705, Dice score: 0.291347\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (30 / 200 EPOCHS) (loss=0.96601) (dice score=0.29534): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (30 / 200 EPOCHS) (loss=0.96018) (dice score=0.30026): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [30] Test Loss: 0.955629, Dice score: 0.294289\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (31 / 200 EPOCHS) (loss=0.93073) (dice score=0.30946): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (31 / 200 EPOCHS) (loss=0.96059) (dice score=0.31195): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [31] Test Loss: 0.952690, Dice score: 0.307931\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (32 / 200 EPOCHS) (loss=0.96717) (dice score=0.31659): 100%|██████████| 14/14 [00:57<00:00,  4.11s/it]\n",
            "Evaluating (32 / 200 EPOCHS) (loss=0.96083) (dice score=0.31524): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n",
            "Training (33 / 200 EPOCHS) (loss=0.96844) (dice score=0.33379): 100%|██████████| 14/14 [00:56<00:00,  4.07s/it]\n",
            "Evaluating (33 / 200 EPOCHS) (loss=0.95909) (dice score=0.33572): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [33] Test Loss: 0.951229, Dice score: 0.332330\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (34 / 200 EPOCHS) (loss=0.96971) (dice score=0.32952): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (34 / 200 EPOCHS) (loss=0.95785) (dice score=0.32966): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n",
            "Training (35 / 200 EPOCHS) (loss=0.96202) (dice score=0.38987): 100%|██████████| 14/14 [00:56<00:00,  4.06s/it]\n",
            "Evaluating (35 / 200 EPOCHS) (loss=0.95773) (dice score=0.37551): 100%|██████████| 8/8 [00:08<00:00,  1.00s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [35] Test Loss: 0.950169, Dice score: 0.377065\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (36 / 200 EPOCHS) (loss=0.92320) (dice score=0.39898): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (36 / 200 EPOCHS) (loss=0.95618) (dice score=0.39388): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n",
            "Training (37 / 200 EPOCHS) (loss=0.93434) (dice score=0.42181): 100%|██████████| 14/14 [00:57<00:00,  4.08s/it]\n",
            "Evaluating (37 / 200 EPOCHS) (loss=0.95433) (dice score=0.41094): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [37] Test Loss: 0.947397, Dice score: 0.411490\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (38 / 200 EPOCHS) (loss=0.95822) (dice score=0.41357): 100%|██████████| 14/14 [00:56<00:00,  4.03s/it]\n",
            "Evaluating (38 / 200 EPOCHS) (loss=0.95445) (dice score=0.40171): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n",
            "Training (39 / 200 EPOCHS) (loss=0.95596) (dice score=0.42217): 100%|██████████| 14/14 [00:56<00:00,  4.06s/it]\n",
            "Evaluating (39 / 200 EPOCHS) (loss=0.95385) (dice score=0.41446): 100%|██████████| 8/8 [00:07<00:00,  1.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [39] Test Loss: 0.944924, Dice score: 0.413607\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (40 / 200 EPOCHS) (loss=0.90220) (dice score=0.42076): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (40 / 200 EPOCHS) (loss=0.95324) (dice score=0.40944): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [40] Test Loss: 0.943533, Dice score: 0.410862\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (41 / 200 EPOCHS) (loss=0.97023) (dice score=0.36720): 100%|██████████| 14/14 [00:57<00:00,  4.07s/it]\n",
            "Evaluating (41 / 200 EPOCHS) (loss=0.95136) (dice score=0.36566): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [41] Test Loss: 0.942874, Dice score: 0.362842\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (42 / 200 EPOCHS) (loss=0.94290) (dice score=0.33194): 100%|██████████| 14/14 [00:57<00:00,  4.08s/it]\n",
            "Evaluating (42 / 200 EPOCHS) (loss=0.95176) (dice score=0.32066): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n",
            "Training (43 / 200 EPOCHS) (loss=0.92936) (dice score=0.33163): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (43 / 200 EPOCHS) (loss=0.94740) (dice score=0.34136): 100%|██████████| 8/8 [00:07<00:00,  1.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [43] Test Loss: 0.939219, Dice score: 0.333773\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (44 / 200 EPOCHS) (loss=0.93600) (dice score=0.38191): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (44 / 200 EPOCHS) (loss=0.94651) (dice score=0.37498): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n",
            "Training (45 / 200 EPOCHS) (loss=0.88073) (dice score=0.37139): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (45 / 200 EPOCHS) (loss=0.94487) (dice score=0.37197): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n",
            "Training (46 / 200 EPOCHS) (loss=0.96269) (dice score=0.37470): 100%|██████████| 14/14 [00:56<00:00,  4.03s/it]\n",
            "Evaluating (46 / 200 EPOCHS) (loss=0.94384) (dice score=0.37031): 100%|██████████| 8/8 [00:08<00:00,  1.03s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [46] Test Loss: 0.936104, Dice score: 0.367990\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (47 / 200 EPOCHS) (loss=0.90051) (dice score=0.40631): 100%|██████████| 14/14 [00:56<00:00,  4.06s/it]\n",
            "Evaluating (47 / 200 EPOCHS) (loss=0.94329) (dice score=0.39473): 100%|██████████| 8/8 [00:08<00:00,  1.03s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [47] Test Loss: 0.933760, Dice score: 0.395957\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (48 / 200 EPOCHS) (loss=0.94002) (dice score=0.41528): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (48 / 200 EPOCHS) (loss=0.94282) (dice score=0.41189): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n",
            "Training (49 / 200 EPOCHS) (loss=0.96030) (dice score=0.43393): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (49 / 200 EPOCHS) (loss=0.94109) (dice score=0.42350): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [49] Test Loss: 0.931029, Dice score: 0.423334\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (50 / 200 EPOCHS) (loss=0.96100) (dice score=0.40922): 100%|██████████| 14/14 [00:58<00:00,  4.21s/it]\n",
            "Evaluating (50 / 200 EPOCHS) (loss=0.94000) (dice score=0.40674): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n",
            "Training (51 / 200 EPOCHS) (loss=0.95523) (dice score=0.47404): 100%|██████████| 14/14 [00:57<00:00,  4.14s/it]\n",
            "Evaluating (51 / 200 EPOCHS) (loss=0.93798) (dice score=0.47099): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [51] Test Loss: 0.929214, Dice score: 0.467855\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (52 / 200 EPOCHS) (loss=0.88396) (dice score=0.48978): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (52 / 200 EPOCHS) (loss=0.93567) (dice score=0.47502): 100%|██████████| 8/8 [00:08<00:00,  1.03s/it]\n",
            "Training (53 / 200 EPOCHS) (loss=0.94386) (dice score=0.49977): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (53 / 200 EPOCHS) (loss=0.93241) (dice score=0.47496): 100%|██████████| 8/8 [00:07<00:00,  1.02it/s]\n",
            "Training (54 / 200 EPOCHS) (loss=0.93864) (dice score=0.46016): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (54 / 200 EPOCHS) (loss=0.93137) (dice score=0.45837): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [54] Test Loss: 0.922689, Dice score: 0.455313\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (55 / 200 EPOCHS) (loss=0.94448) (dice score=0.50541): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (55 / 200 EPOCHS) (loss=0.93064) (dice score=0.49197): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [55] Test Loss: 0.921205, Dice score: 0.494087\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (56 / 200 EPOCHS) (loss=0.95597) (dice score=0.52600): 100%|██████████| 14/14 [00:58<00:00,  4.19s/it]\n",
            "Evaluating (56 / 200 EPOCHS) (loss=0.92850) (dice score=0.51187): 100%|██████████| 8/8 [00:07<00:00,  1.00it/s]\n",
            "Training (57 / 200 EPOCHS) (loss=0.85596) (dice score=0.52187): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (57 / 200 EPOCHS) (loss=0.92931) (dice score=0.51003): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [57] Test Loss: 0.920979, Dice score: 0.509635\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (58 / 200 EPOCHS) (loss=0.95567) (dice score=0.51078): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (58 / 200 EPOCHS) (loss=0.92655) (dice score=0.50139): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [58] Test Loss: 0.917508, Dice score: 0.500596\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (59 / 200 EPOCHS) (loss=0.91496) (dice score=0.51530): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (59 / 200 EPOCHS) (loss=0.92740) (dice score=0.48006): 100%|██████████| 8/8 [00:08<00:00,  1.00s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [59] Test Loss: 0.917011, Dice score: 0.490061\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (60 / 200 EPOCHS) (loss=0.89357) (dice score=0.43828): 100%|██████████| 14/14 [00:58<00:00,  4.16s/it]\n",
            "Evaluating (60 / 200 EPOCHS) (loss=0.92324) (dice score=0.42669): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [60] Test Loss: 0.915907, Dice score: 0.425895\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (61 / 200 EPOCHS) (loss=0.84267) (dice score=0.49868): 100%|██████████| 14/14 [00:57<00:00,  4.11s/it]\n",
            "Evaluating (61 / 200 EPOCHS) (loss=0.92275) (dice score=0.48835): 100%|██████████| 8/8 [00:08<00:00,  1.03s/it]\n",
            "Training (62 / 200 EPOCHS) (loss=0.90183) (dice score=0.46216): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (62 / 200 EPOCHS) (loss=0.92227) (dice score=0.45345): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [62] Test Loss: 0.914319, Dice score: 0.452808\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (63 / 200 EPOCHS) (loss=0.92468) (dice score=0.50521): 100%|██████████| 14/14 [00:57<00:00,  4.11s/it]\n",
            "Evaluating (63 / 200 EPOCHS) (loss=0.91864) (dice score=0.49905): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n",
            "Training (64 / 200 EPOCHS) (loss=0.94726) (dice score=0.48889): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (64 / 200 EPOCHS) (loss=0.91413) (dice score=0.47371): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [64] Test Loss: 0.910157, Dice score: 0.474604\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (65 / 200 EPOCHS) (loss=0.95157) (dice score=0.52008): 100%|██████████| 14/14 [00:58<00:00,  4.17s/it]\n",
            "Evaluating (65 / 200 EPOCHS) (loss=0.91639) (dice score=0.49560): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [65] Test Loss: 0.907575, Dice score: 0.500429\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (66 / 200 EPOCHS) (loss=0.91836) (dice score=0.50162): 100%|██████████| 14/14 [00:57<00:00,  4.14s/it]\n",
            "Evaluating (66 / 200 EPOCHS) (loss=0.91169) (dice score=0.48278): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n",
            "Training (67 / 200 EPOCHS) (loss=0.90567) (dice score=0.49946): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (67 / 200 EPOCHS) (loss=0.90730) (dice score=0.47933): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [67] Test Loss: 0.900279, Dice score: 0.482343\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (68 / 200 EPOCHS) (loss=0.89018) (dice score=0.50371): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (68 / 200 EPOCHS) (loss=0.91149) (dice score=0.48376): 100%|██████████| 8/8 [00:08<00:00,  1.00s/it]\n",
            "Training (69 / 200 EPOCHS) (loss=0.94020) (dice score=0.50368): 100%|██████████| 14/14 [00:57<00:00,  4.11s/it]\n",
            "Evaluating (69 / 200 EPOCHS) (loss=0.90489) (dice score=0.49448): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n",
            "Training (70 / 200 EPOCHS) (loss=0.87613) (dice score=0.57152): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (70 / 200 EPOCHS) (loss=0.90366) (dice score=0.54374): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [70] Test Loss: 0.899907, Dice score: 0.548401\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (71 / 200 EPOCHS) (loss=0.86660) (dice score=0.57782): 100%|██████████| 14/14 [00:58<00:00,  4.20s/it]\n",
            "Evaluating (71 / 200 EPOCHS) (loss=0.91037) (dice score=0.54310): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [71] Test Loss: 0.897279, Dice score: 0.552151\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (72 / 200 EPOCHS) (loss=0.94942) (dice score=0.55739): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (72 / 200 EPOCHS) (loss=0.90569) (dice score=0.53536): 100%|██████████| 8/8 [00:08<00:00,  1.12s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [72] Test Loss: 0.892263, Dice score: 0.539468\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (73 / 200 EPOCHS) (loss=0.90209) (dice score=0.49517): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (73 / 200 EPOCHS) (loss=0.90897) (dice score=0.47876): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n",
            "Training (74 / 200 EPOCHS) (loss=0.79616) (dice score=0.56349): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (74 / 200 EPOCHS) (loss=0.89400) (dice score=0.53408): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [74] Test Loss: 0.886282, Dice score: 0.540572\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (75 / 200 EPOCHS) (loss=0.86385) (dice score=0.53033): 100%|██████████| 14/14 [00:58<00:00,  4.21s/it]\n",
            "Evaluating (75 / 200 EPOCHS) (loss=0.90163) (dice score=0.50761): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [75] Test Loss: 0.885136, Dice score: 0.512189\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (76 / 200 EPOCHS) (loss=0.77234) (dice score=0.55235): 100%|██████████| 14/14 [00:59<00:00,  4.22s/it]\n",
            "Evaluating (76 / 200 EPOCHS) (loss=0.88836) (dice score=0.53699): 100%|██████████| 8/8 [00:07<00:00,  1.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [76] Test Loss: 0.883229, Dice score: 0.538760\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (77 / 200 EPOCHS) (loss=0.89402) (dice score=0.59233): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (77 / 200 EPOCHS) (loss=0.88596) (dice score=0.56558): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n",
            "Training (78 / 200 EPOCHS) (loss=0.79683) (dice score=0.61869): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (78 / 200 EPOCHS) (loss=0.87969) (dice score=0.58689): 100%|██████████| 8/8 [00:08<00:00,  1.09s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [78] Test Loss: 0.876561, Dice score: 0.594668\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (79 / 200 EPOCHS) (loss=0.91076) (dice score=0.63098): 100%|██████████| 14/14 [00:58<00:00,  4.18s/it]\n",
            "Evaluating (79 / 200 EPOCHS) (loss=0.88214) (dice score=0.60574): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n",
            "Training (80 / 200 EPOCHS) (loss=0.81877) (dice score=0.61672): 100%|██████████| 14/14 [00:58<00:00,  4.14s/it]\n",
            "Evaluating (80 / 200 EPOCHS) (loss=0.87962) (dice score=0.58316): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n",
            "Training (81 / 200 EPOCHS) (loss=0.87385) (dice score=0.56847): 100%|██████████| 14/14 [00:57<00:00,  4.14s/it]\n",
            "Evaluating (81 / 200 EPOCHS) (loss=0.88092) (dice score=0.54543): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [81] Test Loss: 0.875487, Dice score: 0.548169\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (82 / 200 EPOCHS) (loss=0.83920) (dice score=0.56228): 100%|██████████| 14/14 [00:58<00:00,  4.21s/it]\n",
            "Evaluating (82 / 200 EPOCHS) (loss=0.88416) (dice score=0.53248): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n",
            "Training (83 / 200 EPOCHS) (loss=0.82102) (dice score=0.57174): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (83 / 200 EPOCHS) (loss=0.87062) (dice score=0.55252): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [83] Test Loss: 0.870447, Dice score: 0.553661\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (84 / 200 EPOCHS) (loss=0.82013) (dice score=0.58103): 100%|██████████| 14/14 [00:59<00:00,  4.26s/it]\n",
            "Evaluating (84 / 200 EPOCHS) (loss=0.86405) (dice score=0.56066): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [84] Test Loss: 0.869632, Dice score: 0.562697\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (85 / 200 EPOCHS) (loss=0.81165) (dice score=0.61267): 100%|██████████| 14/14 [00:59<00:00,  4.25s/it]\n",
            "Evaluating (85 / 200 EPOCHS) (loss=0.86397) (dice score=0.57846): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n",
            "Training (86 / 200 EPOCHS) (loss=0.84887) (dice score=0.62787): 100%|██████████| 14/14 [00:57<00:00,  4.11s/it]\n",
            "Evaluating (86 / 200 EPOCHS) (loss=0.86146) (dice score=0.60368): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [86] Test Loss: 0.859457, Dice score: 0.608044\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (87 / 200 EPOCHS) (loss=0.89120) (dice score=0.62895): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (87 / 200 EPOCHS) (loss=0.84655) (dice score=0.60415): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [87] Test Loss: 0.845816, Dice score: 0.608184\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (88 / 200 EPOCHS) (loss=0.86746) (dice score=0.66898): 100%|██████████| 14/14 [00:58<00:00,  4.18s/it]\n",
            "Evaluating (88 / 200 EPOCHS) (loss=0.85139) (dice score=0.63722): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n",
            "Training (89 / 200 EPOCHS) (loss=0.79976) (dice score=0.68906): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (89 / 200 EPOCHS) (loss=0.83794) (dice score=0.65254): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n",
            "Training (90 / 200 EPOCHS) (loss=0.87162) (dice score=0.70353): 100%|██████████| 14/14 [00:58<00:00,  4.19s/it]\n",
            "Evaluating (90 / 200 EPOCHS) (loss=0.84033) (dice score=0.66444): 100%|██████████| 8/8 [00:08<00:00,  1.04s/it]\n",
            "Training (91 / 200 EPOCHS) (loss=0.78235) (dice score=0.69102): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (91 / 200 EPOCHS) (loss=0.83558) (dice score=0.65467): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [91] Test Loss: 0.836908, Dice score: 0.663007\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (92 / 200 EPOCHS) (loss=0.83838) (dice score=0.69610): 100%|██████████| 14/14 [00:58<00:00,  4.18s/it]\n",
            "Evaluating (92 / 200 EPOCHS) (loss=0.83437) (dice score=0.65496): 100%|██████████| 8/8 [00:08<00:00,  1.01s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [92] Test Loss: 0.827620, Dice score: 0.666663\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (93 / 200 EPOCHS) (loss=0.87184) (dice score=0.68583): 100%|██████████| 14/14 [00:58<00:00,  4.20s/it]\n",
            "Evaluating (93 / 200 EPOCHS) (loss=0.85007) (dice score=0.64436): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n",
            "Training (94 / 200 EPOCHS) (loss=0.81446) (dice score=0.67888): 100%|██████████| 14/14 [00:56<00:00,  4.07s/it]\n",
            "Evaluating (94 / 200 EPOCHS) (loss=0.82046) (dice score=0.63968): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [94] Test Loss: 0.822040, Dice score: 0.650782\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (95 / 200 EPOCHS) (loss=0.74701) (dice score=0.69556): 100%|██████████| 14/14 [00:56<00:00,  4.04s/it]\n",
            "Evaluating (95 / 200 EPOCHS) (loss=0.82356) (dice score=0.65672): 100%|██████████| 8/8 [00:08<00:00,  1.00s/it]\n",
            "Training (96 / 200 EPOCHS) (loss=0.88310) (dice score=0.71448): 100%|██████████| 14/14 [00:57<00:00,  4.10s/it]\n",
            "Evaluating (96 / 200 EPOCHS) (loss=0.80035) (dice score=0.67013): 100%|██████████| 8/8 [00:08<00:00,  1.02s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [96] Test Loss: 0.813272, Dice score: 0.682102\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (97 / 200 EPOCHS) (loss=0.77182) (dice score=0.71448): 100%|██████████| 14/14 [00:56<00:00,  4.03s/it]\n",
            "Evaluating (97 / 200 EPOCHS) (loss=0.80532) (dice score=0.66788): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [97] Test Loss: 0.810211, Dice score: 0.679470\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (98 / 200 EPOCHS) (loss=0.76150) (dice score=0.72078): 100%|██████████| 14/14 [00:56<00:00,  4.07s/it]\n",
            "Evaluating (98 / 200 EPOCHS) (loss=0.80418) (dice score=0.67904): 100%|██████████| 8/8 [00:08<00:00,  1.05s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [98] Test Loss: 0.809524, Dice score: 0.688837\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (99 / 200 EPOCHS) (loss=0.70833) (dice score=0.71856): 100%|██████████| 14/14 [00:55<00:00,  4.00s/it]\n",
            "Evaluating (99 / 200 EPOCHS) (loss=0.78437) (dice score=0.67286): 100%|██████████| 8/8 [00:07<00:00,  1.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [99] Test Loss: 0.793896, Dice score: 0.685198\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (100 / 200 EPOCHS) (loss=0.73517) (dice score=0.67686): 100%|██████████| 14/14 [00:56<00:00,  4.06s/it]\n",
            "Evaluating (100 / 200 EPOCHS) (loss=0.77943) (dice score=0.63785): 100%|██████████| 8/8 [00:08<00:00,  1.03s/it]\n",
            "Training (101 / 200 EPOCHS) (loss=0.80841) (dice score=0.69430): 100%|██████████| 14/14 [00:56<00:00,  4.05s/it]\n",
            "Evaluating (101 / 200 EPOCHS) (loss=0.77393) (dice score=0.65434): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n",
            "Training (102 / 200 EPOCHS) (loss=0.78440) (dice score=0.70876): 100%|██████████| 14/14 [00:56<00:00,  4.02s/it]\n",
            "Evaluating (102 / 200 EPOCHS) (loss=0.77072) (dice score=0.66408): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [102] Test Loss: 0.786189, Dice score: 0.675418\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (103 / 200 EPOCHS) (loss=0.77268) (dice score=0.72116): 100%|██████████| 14/14 [00:56<00:00,  4.06s/it]\n",
            "Evaluating (103 / 200 EPOCHS) (loss=0.78983) (dice score=0.66671): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [103] Test Loss: 0.784720, Dice score: 0.682311\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (104 / 200 EPOCHS) (loss=0.81588) (dice score=0.71279): 100%|██████████| 14/14 [00:58<00:00,  4.17s/it]\n",
            "Evaluating (104 / 200 EPOCHS) (loss=0.76514) (dice score=0.66661): 100%|██████████| 8/8 [00:08<00:00,  1.12s/it]\n",
            "Training (105 / 200 EPOCHS) (loss=0.73429) (dice score=0.73204): 100%|██████████| 14/14 [00:58<00:00,  4.16s/it]\n",
            "Evaluating (105 / 200 EPOCHS) (loss=0.75695) (dice score=0.69047): 100%|██████████| 8/8 [00:08<00:00,  1.11s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [105] Test Loss: 0.771802, Dice score: 0.700001\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (106 / 200 EPOCHS) (loss=0.66667) (dice score=0.73898): 100%|██████████| 14/14 [00:58<00:00,  4.16s/it]\n",
            "Evaluating (106 / 200 EPOCHS) (loss=0.75738) (dice score=0.69315): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [106] Test Loss: 0.752915, Dice score: 0.706024\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (107 / 200 EPOCHS) (loss=0.63737) (dice score=0.71656): 100%|██████████| 14/14 [00:58<00:00,  4.20s/it]\n",
            "Evaluating (107 / 200 EPOCHS) (loss=0.74932) (dice score=0.67496): 100%|██████████| 8/8 [00:08<00:00,  1.09s/it]\n",
            "Training (108 / 200 EPOCHS) (loss=0.76905) (dice score=0.72394): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (108 / 200 EPOCHS) (loss=0.73305) (dice score=0.68209): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [108] Test Loss: 0.751617, Dice score: 0.693808\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (109 / 200 EPOCHS) (loss=0.76877) (dice score=0.75468): 100%|██████████| 14/14 [00:59<00:00,  4.23s/it]\n",
            "Evaluating (109 / 200 EPOCHS) (loss=0.74169) (dice score=0.70848): 100%|██████████| 8/8 [00:08<00:00,  1.09s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [109] Test Loss: 0.743488, Dice score: 0.721107\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (110 / 200 EPOCHS) (loss=0.78792) (dice score=0.75435): 100%|██████████| 14/14 [00:57<00:00,  4.14s/it]\n",
            "Evaluating (110 / 200 EPOCHS) (loss=0.73303) (dice score=0.70426): 100%|██████████| 8/8 [00:08<00:00,  1.07s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [110] Test Loss: 0.736945, Dice score: 0.718787\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (111 / 200 EPOCHS) (loss=0.68960) (dice score=0.77148): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (111 / 200 EPOCHS) (loss=0.73422) (dice score=0.71336): 100%|██████████| 8/8 [00:08<00:00,  1.09s/it]\n",
            "Training (112 / 200 EPOCHS) (loss=0.69297) (dice score=0.77573): 100%|██████████| 14/14 [00:57<00:00,  4.09s/it]\n",
            "Evaluating (112 / 200 EPOCHS) (loss=0.68908) (dice score=0.72350): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [112] Test Loss: 0.717526, Dice score: 0.736849\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (113 / 200 EPOCHS) (loss=0.58681) (dice score=0.79379): 100%|██████████| 14/14 [00:57<00:00,  4.12s/it]\n",
            "Evaluating (113 / 200 EPOCHS) (loss=0.70530) (dice score=0.73676): 100%|██████████| 8/8 [00:07<00:00,  1.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [113] Test Loss: 0.706001, Dice score: 0.752690\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (114 / 200 EPOCHS) (loss=0.71204) (dice score=0.78192): 100%|██████████| 14/14 [00:58<00:00,  4.15s/it]\n",
            "Evaluating (114 / 200 EPOCHS) (loss=0.70315) (dice score=0.71766): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n",
            "Training (115 / 200 EPOCHS) (loss=0.72429) (dice score=0.78492): 100%|██████████| 14/14 [00:57<00:00,  4.13s/it]\n",
            "Evaluating (115 / 200 EPOCHS) (loss=0.72613) (dice score=0.72410): 100%|██████████| 8/8 [00:08<00:00,  1.08s/it]\n",
            "Training (116 / 200 EPOCHS) (loss=0.57978) (dice score=0.77730): 100%|██████████| 14/14 [00:58<00:00,  4.16s/it]\n",
            "Evaluating (116 / 200 EPOCHS) (loss=0.69262) (dice score=0.72120): 100%|██████████| 8/8 [00:08<00:00,  1.06s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best record! [116] Test Loss: 0.692511, Dice score: 0.736259\n",
            "saved model\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Training (117 / 200 EPOCHS) (loss=0.67940) (dice score=0.79147):  57%|█████▋    | 8/14 [00:33<00:26,  4.37s/it]"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = [i for i in range(len(losses['train']))]\n",
        "train_loss = losses['train']\n",
        "val_loss = losses['val']\n",
        "train_dice = dice_scores['train']\n",
        "val_dice = dice_scores['val']\n",
        "\n",
        "fig , ax = plt.subplots(1,2)\n",
        "fig.set_size_inches(12,6)\n",
        "\n",
        "ax[0].plot(epochs , train_loss , 'g-o' , label = 'Training Loss')\n",
        "ax[0].plot(epochs , val_loss , 'r-o' , label = 'Validation Loss')\n",
        "ax[0].set_title('Training & Validation Loss')\n",
        "ax[0].legend()\n",
        "ax[0].set_xlabel(\"Epochs\")\n",
        "ax[0].set_ylabel(\"Loss\")\n",
        "\n",
        "ax[1].plot(epochs , train_dice , 'go-' , label = 'Training Dice score')\n",
        "ax[1].plot(epochs , val_dice , 'ro-' , label = 'Validation Dice score')\n",
        "ax[1].set_title('Training & Validation Dice score')\n",
        "ax[1].legend()\n",
        "ax[1].set_xlabel(\"Epochs\")\n",
        "ax[1].set_ylabel(\"Dice score\")\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "YuO30yRz8rBp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred_dict = {'input':[], 'target':[], 'output':[]}\n",
        "\n",
        "if MODEL_SAVE:\n",
        "    model.load_state_dict(torch.load(os.path.join(MODEL_SAVE_PATH, model_name)))\n",
        "\n",
        "model.to('cpu')\n",
        "model.eval()\n",
        "with torch.no_grad():\n",
        "    for i, data in enumerate(test_loader):\n",
        "        img, target = data[\"image\"].cpu(), data[\"label\"].cpu()\n",
        "\n",
        "        output = model(img).detach().cpu()\n",
        "        output = torch.argmax(output, dim=1)\n",
        "        \n",
        "        pred_dict['input'].append(img)\n",
        "        pred_dict['target'].append(target)\n",
        "        pred_dict['output'].append(output)\n",
        "        \n",
        "        if i > 10:\n",
        "            break"
      ],
      "metadata": {
        "id": "M2uCAAEXXXVa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ncols, nrows = 10, 3*3\n",
        "interval = int(IMAGE_SIZE[-1]//(ncols*nrows/3))\n",
        "fig, axes = plt.subplots(ncols=ncols, nrows=nrows, figsize=(ncols,nrows))\n",
        "cnt1, cnt2, cnt3 = 0, 0, 0\n",
        "for i in range(nrows):\n",
        "    for j in range(ncols):\n",
        "        if i%3 == 0:\n",
        "            axes[i,j].imshow(pred_dict['input'][0][0,0,:,:,cnt1], cmap='gray')\n",
        "            cnt1+=interval\n",
        "        elif i%3 == 1:\n",
        "            axes[i,j].imshow(pred_dict['target'][0][0,0,:,:,cnt2], cmap='gray')\n",
        "            cnt2+=interval\n",
        "        else:\n",
        "            axes[i,j].imshow(pred_dict['output'][0][0,:,:,cnt3], cmap='gray')\n",
        "            cnt3+=interval\n",
        "        axes[i,j].axis('off')\n",
        "plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1)\n",
        "plt.show()  "
      ],
      "metadata": {
        "id": "3zXuZV6MXf32"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.savefig(r\"C:\\Users\\jungr\\OneDrive\\바탕 화면\\data/PS_predictions_ORGAN_ONLY.png\")"
      ],
      "metadata": {
        "id": "ofsIvJ5NXtCt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kBEgl1xXYA4N"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}